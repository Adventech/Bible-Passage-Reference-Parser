var grammar = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "sequence": parse_sequence,
        "range": parse_range,
        "b_range": parse_b_range,
        "bcv_hyphen_range": parse_bcv_hyphen_range,
        "b": parse_b,
        "bc": parse_bc,
        "bc_comma": parse_bc_comma,
        "bc_title": parse_bc_title,
        "bcv": parse_bcv,
        "bcv_weak": parse_bcv_weak,
        "bcv_comma": parse_bcv_comma,
        "bv": parse_bv,
        "cb": parse_cb,
        "cb_range": parse_cb_range,
        "cbv": parse_cbv,
        "cb_ordinal": parse_cb_ordinal,
        "cbv_ordinal": parse_cbv_ordinal,
        "c_psalm": parse_c_psalm,
        "cv_psalm": parse_cv_psalm,
        "c_title": parse_c_title,
        "cv": parse_cv,
        "cv_weak": parse_cv_weak,
        "c": parse_c,
        "integer_title": parse_integer_title,
        "v_letter": parse_v_letter,
        "v": parse_v,
        "ff": parse_ff,
        "c_explicit": parse_c_explicit,
        "v_explicit": parse_v_explicit,
        "cv_sep": parse_cv_sep,
        "cv_sep_weak": parse_cv_sep_weak,
        "sequence_sep": parse_sequence_sep,
        "range_sep": parse_range_sep,
        "title": parse_title,
        "in_book_of": parse_in_book_of,
        "abbrev": parse_abbrev,
        "translation_sequence_enclosed": parse_translation_sequence_enclosed,
        "translation_sequence": parse_translation_sequence,
        "translation": parse_translation,
        "integer": parse_integer,
        "any_integer": parse_any_integer,
        "word": parse_word,
        "sp": parse_sp,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        
        result1 = parse_bcv_hyphen_range();
        if (result1 === null) {
          result1 = parse_sequence();
          if (result1 === null) {
            result1 = parse_cb_range();
            if (result1 === null) {
              result1 = parse_range();
              if (result1 === null) {
                result1 = parse_ff();
                if (result1 === null) {
                  result1 = parse_bcv_comma();
                  if (result1 === null) {
                    result1 = parse_bc_title();
                    if (result1 === null) {
                      result1 = parse_bcv();
                      if (result1 === null) {
                        result1 = parse_bcv_weak();
                        if (result1 === null) {
                          result1 = parse_bc();
                          if (result1 === null) {
                            result1 = parse_cv_psalm();
                            if (result1 === null) {
                              result1 = parse_bv();
                              if (result1 === null) {
                                result1 = parse_b_range();
                                if (result1 === null) {
                                  result1 = parse_c_psalm();
                                  if (result1 === null) {
                                    result1 = parse_b();
                                    if (result1 === null) {
                                      result1 = parse_cbv();
                                      if (result1 === null) {
                                        result1 = parse_cbv_ordinal();
                                        if (result1 === null) {
                                          result1 = parse_cb();
                                          if (result1 === null) {
                                            result1 = parse_cb_ordinal();
                                            if (result1 === null) {
                                              result1 = parse_translation_sequence_enclosed();
                                              if (result1 === null) {
                                                result1 = parse_translation_sequence();
                                                if (result1 === null) {
                                                  result1 = parse_sequence_sep();
                                                  if (result1 === null) {
                                                    result1 = parse_c_title();
                                                    if (result1 === null) {
                                                      result1 = parse_integer_title();
                                                      if (result1 === null) {
                                                        result1 = parse_cv();
                                                        if (result1 === null) {
                                                          result1 = parse_cv_weak();
                                                          if (result1 === null) {
                                                            result1 = parse_v_letter();
                                                            if (result1 === null) {
                                                              result1 = parse_integer();
                                                              if (result1 === null) {
                                                                result1 = parse_c();
                                                                if (result1 === null) {
                                                                  result1 = parse_v();
                                                                  if (result1 === null) {
                                                                    result1 = parse_word();
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_bcv_hyphen_range();
            if (result1 === null) {
              result1 = parse_sequence();
              if (result1 === null) {
                result1 = parse_cb_range();
                if (result1 === null) {
                  result1 = parse_range();
                  if (result1 === null) {
                    result1 = parse_ff();
                    if (result1 === null) {
                      result1 = parse_bcv_comma();
                      if (result1 === null) {
                        result1 = parse_bc_title();
                        if (result1 === null) {
                          result1 = parse_bcv();
                          if (result1 === null) {
                            result1 = parse_bcv_weak();
                            if (result1 === null) {
                              result1 = parse_bc();
                              if (result1 === null) {
                                result1 = parse_cv_psalm();
                                if (result1 === null) {
                                  result1 = parse_bv();
                                  if (result1 === null) {
                                    result1 = parse_b_range();
                                    if (result1 === null) {
                                      result1 = parse_c_psalm();
                                      if (result1 === null) {
                                        result1 = parse_b();
                                        if (result1 === null) {
                                          result1 = parse_cbv();
                                          if (result1 === null) {
                                            result1 = parse_cbv_ordinal();
                                            if (result1 === null) {
                                              result1 = parse_cb();
                                              if (result1 === null) {
                                                result1 = parse_cb_ordinal();
                                                if (result1 === null) {
                                                  result1 = parse_translation_sequence_enclosed();
                                                  if (result1 === null) {
                                                    result1 = parse_translation_sequence();
                                                    if (result1 === null) {
                                                      result1 = parse_sequence_sep();
                                                      if (result1 === null) {
                                                        result1 = parse_c_title();
                                                        if (result1 === null) {
                                                          result1 = parse_integer_title();
                                                          if (result1 === null) {
                                                            result1 = parse_cv();
                                                            if (result1 === null) {
                                                              result1 = parse_cv_weak();
                                                              if (result1 === null) {
                                                                result1 = parse_v_letter();
                                                                if (result1 === null) {
                                                                  result1 = parse_integer();
                                                                  if (result1 === null) {
                                                                    result1 = parse_c();
                                                                    if (result1 === null) {
                                                                      result1 = parse_v();
                                                                      if (result1 === null) {
                                                                        result1 = parse_word();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      function parse_sequence() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["sequence"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_cb_range();
          if (result1 === null) {
            result1 = parse_bcv_hyphen_range();
            if (result1 === null) {
              result1 = parse_range();
              if (result1 === null) {
                result1 = parse_ff();
                if (result1 === null) {
                  result1 = parse_bcv_comma();
                  if (result1 === null) {
                    result1 = parse_bc_title();
                    if (result1 === null) {
                      result1 = parse_bcv();
                      if (result1 === null) {
                        result1 = parse_bcv_weak();
                        if (result1 === null) {
                          result1 = parse_bc();
                          if (result1 === null) {
                            result1 = parse_cv_psalm();
                            if (result1 === null) {
                              result1 = parse_bv();
                              if (result1 === null) {
                                result1 = parse_b_range();
                                if (result1 === null) {
                                  result1 = parse_c_psalm();
                                  if (result1 === null) {
                                    result1 = parse_b();
                                    if (result1 === null) {
                                      result1 = parse_cbv();
                                      if (result1 === null) {
                                        result1 = parse_cbv_ordinal();
                                        if (result1 === null) {
                                          result1 = parse_cb();
                                          if (result1 === null) {
                                            result1 = parse_cb_ordinal();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            result3 = parse_sequence_sep();
            if (result3 === null) {
              result3 = "";
            }
            if (result3 !== null) {
              result4 = parse_cb_range();
              if (result4 === null) {
                result4 = parse_bcv_hyphen_range();
                if (result4 === null) {
                  result4 = parse_range();
                  if (result4 === null) {
                    result4 = parse_ff();
                    if (result4 === null) {
                      result4 = parse_bcv_comma();
                      if (result4 === null) {
                        result4 = parse_bc_title();
                        if (result4 === null) {
                          result4 = parse_bcv();
                          if (result4 === null) {
                            result4 = parse_bcv_weak();
                            if (result4 === null) {
                              result4 = parse_bc();
                              if (result4 === null) {
                                result4 = parse_cv_psalm();
                                if (result4 === null) {
                                  result4 = parse_bv();
                                  if (result4 === null) {
                                    result4 = parse_b_range();
                                    if (result4 === null) {
                                      result4 = parse_c_psalm();
                                      if (result4 === null) {
                                        result4 = parse_b();
                                        if (result4 === null) {
                                          result4 = parse_cbv();
                                          if (result4 === null) {
                                            result4 = parse_cbv_ordinal();
                                            if (result4 === null) {
                                              result4 = parse_cb();
                                              if (result4 === null) {
                                                result4 = parse_cb_ordinal();
                                                if (result4 === null) {
                                                  result4 = parse_c_title();
                                                  if (result4 === null) {
                                                    result4 = parse_integer_title();
                                                    if (result4 === null) {
                                                      result4 = parse_cv();
                                                      if (result4 === null) {
                                                        result4 = parse_cv_weak();
                                                        if (result4 === null) {
                                                          result4 = parse_v_letter();
                                                          if (result4 === null) {
                                                            result4 = parse_integer();
                                                            if (result4 === null) {
                                                              result4 = parse_c();
                                                              if (result4 === null) {
                                                                result4 = parse_v();
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = pos2;
              }
            } else {
              result3 = null;
              pos = pos2;
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                pos2 = pos;
                result3 = parse_sequence_sep();
                if (result3 === null) {
                  result3 = "";
                }
                if (result3 !== null) {
                  result4 = parse_cb_range();
                  if (result4 === null) {
                    result4 = parse_bcv_hyphen_range();
                    if (result4 === null) {
                      result4 = parse_range();
                      if (result4 === null) {
                        result4 = parse_ff();
                        if (result4 === null) {
                          result4 = parse_bcv_comma();
                          if (result4 === null) {
                            result4 = parse_bc_title();
                            if (result4 === null) {
                              result4 = parse_bcv();
                              if (result4 === null) {
                                result4 = parse_bcv_weak();
                                if (result4 === null) {
                                  result4 = parse_bc();
                                  if (result4 === null) {
                                    result4 = parse_cv_psalm();
                                    if (result4 === null) {
                                      result4 = parse_bv();
                                      if (result4 === null) {
                                        result4 = parse_b_range();
                                        if (result4 === null) {
                                          result4 = parse_c_psalm();
                                          if (result4 === null) {
                                            result4 = parse_b();
                                            if (result4 === null) {
                                              result4 = parse_cbv();
                                              if (result4 === null) {
                                                result4 = parse_cbv_ordinal();
                                                if (result4 === null) {
                                                  result4 = parse_cb();
                                                  if (result4 === null) {
                                                    result4 = parse_cb_ordinal();
                                                    if (result4 === null) {
                                                      result4 = parse_c_title();
                                                      if (result4 === null) {
                                                        result4 = parse_integer_title();
                                                        if (result4 === null) {
                                                          result4 = parse_cv();
                                                          if (result4 === null) {
                                                            result4 = parse_cv_weak();
                                                            if (result4 === null) {
                                                              result4 = parse_v_letter();
                                                              if (result4 === null) {
                                                                result4 = parse_integer();
                                                                if (result4 === null) {
                                                                  result4 = parse_c();
                                                                  if (result4 === null) {
                                                                    result4 = parse_v();
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos2;
                  }
                } else {
                  result3 = null;
                  pos = pos2;
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { val_2.unshift([val_1]); return {"type": "sequence", "value": val_2, "indices": [indices["sequence"], pos - 1]} })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_range() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["range"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_ff();
          if (result1 === null) {
            result1 = parse_bcv_comma();
            if (result1 === null) {
              result1 = parse_bc_title();
              if (result1 === null) {
                result1 = parse_bcv();
                if (result1 === null) {
                  result1 = parse_bcv_weak();
                  if (result1 === null) {
                    result1 = parse_bc();
                    if (result1 === null) {
                      result1 = parse_cv_psalm();
                      if (result1 === null) {
                        result1 = parse_bv();
                        if (result1 === null) {
                          result1 = parse_cbv();
                          if (result1 === null) {
                            result1 = parse_cbv_ordinal();
                            if (result1 === null) {
                              result1 = parse_c_psalm();
                              if (result1 === null) {
                                result1 = parse_cb();
                                if (result1 === null) {
                                  result1 = parse_cb_ordinal();
                                  if (result1 === null) {
                                    result1 = parse_c_title();
                                    if (result1 === null) {
                                      result1 = parse_integer_title();
                                      if (result1 === null) {
                                        result1 = parse_cv();
                                        if (result1 === null) {
                                          result1 = parse_cv_weak();
                                          if (result1 === null) {
                                            result1 = parse_v_letter();
                                            if (result1 === null) {
                                              result1 = parse_integer();
                                              if (result1 === null) {
                                                result1 = parse_c();
                                                if (result1 === null) {
                                                  result1 = parse_v();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_range_sep();
            if (result2 !== null) {
              result3 = parse_ff();
              if (result3 === null) {
                result3 = parse_bcv_comma();
                if (result3 === null) {
                  result3 = parse_bc_title();
                  if (result3 === null) {
                    result3 = parse_bcv();
                    if (result3 === null) {
                      result3 = parse_bcv_weak();
                      if (result3 === null) {
                        result3 = parse_bc();
                        if (result3 === null) {
                          result3 = parse_cv_psalm();
                          if (result3 === null) {
                            result3 = parse_bv();
                            if (result3 === null) {
                              result3 = parse_cbv();
                              if (result3 === null) {
                                result3 = parse_cbv_ordinal();
                                if (result3 === null) {
                                  result3 = parse_c_psalm();
                                  if (result3 === null) {
                                    result3 = parse_cb();
                                    if (result3 === null) {
                                      result3 = parse_cb_ordinal();
                                      if (result3 === null) {
                                        result3 = parse_c_title();
                                        if (result3 === null) {
                                          result3 = parse_integer_title();
                                          if (result3 === null) {
                                            result3 = parse_cv();
                                            if (result3 === null) {
                                              result3 = parse_v_letter();
                                              if (result3 === null) {
                                                result3 = parse_integer();
                                                if (result3 === null) {
                                                  result3 = parse_cv_weak();
                                                  if (result3 === null) {
                                                    result3 = parse_c();
                                                    if (result3 === null) {
                                                      result3 = parse_v();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "range", "value": [val_1, val_2], "indices": [indices["range"], pos - 1]} })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_b_range() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["b_range"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result2 = parse_range_sep();
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_range();
              if (result3 === null) {
                result3 = parse_ff();
                if (result3 === null) {
                  result3 = parse_bcv();
                  if (result3 === null) {
                    result3 = parse_bcv_weak();
                    if (result3 === null) {
                      result3 = parse_bc();
                      if (result3 === null) {
                        result3 = parse_bv();
                      }
                    }
                  }
                }
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result4 = parse_b();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "b_range", "value": [val_1, val_2], "indices": [indices["b_range"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bcv_hyphen_range() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bcv_hyphen_range"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 45) {
              result2 = "-";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 === null) {
              result2 = parse_space();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_c();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 45) {
                  result4 = "-";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_v();
                  if (result5 !== null) {
                    if (input.charCodeAt(pos) === 45) {
                      result6 = "-";
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = parse_v();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2, val_3, val_4) { return {"type": "range", "value": [{"type": "bcv", "value": [{"type": "bc", "value": [val_1, val_2], "indices": [val_1.indices[0], val_2.indices[1]]}, val_3], "indices": [val_1.indices[0], val_3.indices[1]]}, val_4], "indices": [indices["bcv_hyphen_range"], pos - 1]} })(pos0, result0[1], result0[3], result0[5], result0[7]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_b() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["b"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 31) {
            result1 = "\x1F";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\x1F\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_any_integer();
            if (result2 !== null) {
              pos2 = pos;
              if (input.charCodeAt(pos) === 47) {
                result3 = "/";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }
              if (result3 !== null) {
                if (/^[a-z]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-z]");
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 31) {
                  result4 = "\x1F";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\x1F\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "b", "value": val.value, "indices": [indices["b"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bc() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bc"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            pos2 = pos;
            result2 = parse_v_explicit();
            if (result2 !== null) {
              pos3 = pos;
              reportFailures++;
              pos4 = pos;
              result3 = parse_c();
              if (result3 !== null) {
                result4 = parse_cv_sep();
                if (result4 !== null) {
                  result5 = parse_v();
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = pos4;
                  }
                } else {
                  result3 = null;
                  pos = pos4;
                }
              } else {
                result3 = null;
                pos = pos4;
              }
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = pos3;
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 === null) {
              result3 = parse_cv_sep();
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_cv_sep();
                }
              } else {
                result2 = null;
              }
              if (result2 === null) {
                result3 = parse_cv_sep_weak();
                if (result3 !== null) {
                  result2 = [];
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_cv_sep_weak();
                  }
                } else {
                  result2 = null;
                }
                if (result2 === null) {
                  result3 = parse_range_sep();
                  if (result3 !== null) {
                    result2 = [];
                    while (result3 !== null) {
                      result2.push(result3);
                      result3 = parse_range_sep();
                    }
                  } else {
                    result2 = null;
                  }
                  if (result2 === null) {
                    result2 = parse_sp();
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse_c();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [indices["bc"], pos - 1]} })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bc_comma() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bc_comma"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 44) {
                result3 = ",";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  result5 = parse_c();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [indices["bc_comma"], pos - 1]} })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bc_title() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bc_title"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_bc();
          if (result1 !== null) {
            result2 = parse_title();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bc_title", "value": [val_1, val_2], "indices": [indices["bc_title"], pos - 1]} })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bcv() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bcv"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_bc();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            pos3 = pos;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_v_explicit();
              if (result3 !== null) {
                result4 = parse_v();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_cv_sep();
              if (result3 === null) {
                result3 = parse_sequence_sep();
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_v_explicit();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 === null) {
                result3 = parse_cv_sep();
              }
              if (result3 !== null) {
                result4 = parse_v_letter();
                if (result4 === null) {
                  result4 = parse_v();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bcv_weak() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bcv_weak"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_bc();
          if (result1 !== null) {
            result2 = parse_cv_sep_weak();
            if (result2 !== null) {
              result3 = parse_v_letter();
              if (result3 === null) {
                result3 = parse_v();
              }
              if (result3 !== null) {
                pos2 = pos;
                reportFailures++;
                pos3 = pos;
                result4 = parse_cv_sep();
                if (result4 !== null) {
                  result5 = parse_v();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv_weak"], pos - 1]} })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bcv_comma() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bcv_comma"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_bc_comma();
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 44) {
                result3 = ",";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  result5 = parse_v_letter();
                  if (result5 === null) {
                    result5 = parse_v();
                  }
                  if (result5 !== null) {
                    pos2 = pos;
                    reportFailures++;
                    pos3 = pos;
                    result6 = parse_cv_sep();
                    if (result6 !== null) {
                      result7 = parse_v();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv_comma"], pos - 1]} })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_bv() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["bv"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_b();
          if (result1 !== null) {
            result3 = parse_cv_sep();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_cv_sep();
              }
            } else {
              result2 = null;
            }
            if (result2 === null) {
              result3 = parse_cv_sep_weak();
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_cv_sep_weak();
                }
              } else {
                result2 = null;
              }
              if (result2 === null) {
                result3 = parse_range_sep();
                if (result3 !== null) {
                  result2 = [];
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_range_sep();
                  }
                } else {
                  result2 = null;
                }
                if (result2 === null) {
                  pos2 = pos;
                  result3 = parse_sequence_sep();
                  if (result3 !== null) {
                    result2 = [];
                    while (result3 !== null) {
                      result2.push(result3);
                      result3 = parse_sequence_sep();
                    }
                  } else {
                    result2 = null;
                  }
                  if (result2 !== null) {
                    pos3 = pos;
                    reportFailures++;
                    result3 = parse_v_explicit();
                    reportFailures--;
                    if (result3 !== null) {
                      result3 = "";
                      pos = pos3;
                    } else {
                      result3 = null;
                    }
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                  if (result2 === null) {
                    result2 = parse_sp();
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse_v_letter();
              if (result3 === null) {
                result3 = parse_v();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bv", "value": [val_1, val_2], "indices": [indices["bv"], pos - 1]} })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cb() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cb"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c_explicit();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_in_book_of();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_b();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [indices["cb"], pos - 1]} })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cb_range() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cb_range"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c_explicit();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_range_sep();
              if (result3 !== null) {
                result4 = parse_c();
                if (result4 !== null) {
                  result5 = parse_in_book_of();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = parse_b();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2, val_3) { return {"type": "cb_range", "value": [val_3, val_1, val_2], "indices": [indices["cb_range"], pos - 1]} })(pos0, result0[2], result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cbv() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cbv"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_cb();
          if (result1 !== null) {
            result2 = parse_sequence_sep();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_v_explicit();
              if (result3 !== null) {
                result4 = parse_v();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["cbv"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cb_ordinal() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cb_ordinal"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            if (input.substr(pos, 2) === "th") {
              result2 = "th";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"th\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 2) === "nd") {
                result2 = "nd";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"nd\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos, 2) === "st") {
                  result2 = "st";
                  pos += 2;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"st\"");
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = parse_c_explicit();
              if (result3 !== null) {
                result4 = parse_in_book_of();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_b();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [indices["cb_ordinal"], pos - 1]} })(pos0, result0[1], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cbv_ordinal() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cbv_ordinal"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_cb_ordinal();
          if (result1 !== null) {
            result2 = parse_sequence_sep();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_v_explicit();
              if (result3 !== null) {
                result4 = parse_v();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["cbv_ordinal"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_c_psalm() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["c_psalm"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 31) {
            result1 = "\x1F";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\x1F\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              if (input.substr(pos, 3) === "/p\x1F") {
                result3 = "/p\x1F";
                pos += 3;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/p\\x1F\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "c_psalm", "value": val.value, "indices": [indices["c_psalm"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cv_psalm() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cv_psalm"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c_psalm();
          if (result1 !== null) {
            result2 = parse_sequence_sep();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_v_explicit();
              if (result3 !== null) {
                result4 = parse_v();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "cv_psalm", "value": [val_1, val_2], "indices": [indices["cv_psalm"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_c_title() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["c_title"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c_explicit();
          if (result1 !== null) {
            result2 = parse_c();
            if (result2 !== null) {
              result3 = parse_title();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "c_title", "value": [val_1, val_2], "indices": [indices["c_title"], pos - 1]} })(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cv() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cv"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            pos3 = pos;
            if (input.charCodeAt(pos) === 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_v_explicit();
              if (result3 !== null) {
                result4 = parse_v();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_cv_sep();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_v_explicit();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 === null) {
                result3 = parse_cv_sep();
              }
              if (result3 !== null) {
                result4 = parse_v_letter();
                if (result4 === null) {
                  result4 = parse_v();
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [indices["cv"], pos - 1]} })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cv_weak() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["cv_weak"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c();
          if (result1 !== null) {
            result2 = parse_cv_sep_weak();
            if (result2 !== null) {
              result3 = parse_v_letter();
              if (result3 === null) {
                result3 = parse_v();
              }
              if (result3 !== null) {
                pos2 = pos;
                reportFailures++;
                pos3 = pos;
                result4 = parse_cv_sep();
                if (result4 !== null) {
                  result5 = parse_v();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [indices["cv_weak"], pos - 1]} })(pos0, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_c() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["c"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_c_explicit();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "c", "value": [val], "indices": [indices["c"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_integer_title() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["integer_title"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result2 = parse_cv_sep();
            if (result2 === null) {
              result2 = parse_sequence_sep();
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.substr(pos, 3).toLowerCase() === "t\xEDt") {
                result3 = input.substr(pos, 3);
                pos += 3;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"t\\xEDt\"");
                }
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "ulo") {
                  result4 = "ulo";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ulo\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1) { return {"type": "integer_title", "value": [val_1], "indices": [indices["integer_title"], pos - 1]} })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_v_letter() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["v_letter"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_v_explicit();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result3 = parse_sp();
              if (result3 !== null) {
                if (/^[a-e]/.test(input.charAt(pos))) {
                  result4 = input.charAt(pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[a-e]");
                  }
                }
                if (result4 !== null) {
                  pos2 = pos;
                  reportFailures++;
                  if (/^[a-z]/.test(input.charAt(pos))) {
                    result5 = input.charAt(pos);
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[a-z]");
                    }
                  }
                  reportFailures--;
                  if (result5 === null) {
                    result5 = "";
                  } else {
                    result5 = null;
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "v", "value": [val], "indices": [indices["v_letter"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_v() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["v"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_v_explicit();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "v", "value": [val], "indices": [indices["v"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ff() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["ff"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_bcv();
          if (result1 === null) {
            result1 = parse_bcv_weak();
            if (result1 === null) {
              result1 = parse_bc();
              if (result1 === null) {
                result1 = parse_cv();
                if (result1 === null) {
                  result1 = parse_cv_weak();
                  if (result1 === null) {
                    result1 = parse_integer();
                    if (result1 === null) {
                      result1 = parse_c();
                      if (result1 === null) {
                        result1 = parse_v();
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 102) {
                result3 = "f";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"f\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 102) {
                  result4 = "f";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_abbrev();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    pos2 = pos;
                    reportFailures++;
                    if (/^[a-z]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[a-z]");
                      }
                    }
                    reportFailures--;
                    if (result6 === null) {
                      result6 = "";
                    } else {
                      result6 = null;
                      pos = pos2;
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val_1) { return {"type": "ff", "value": [val_1], "indices": [indices["ff"], pos - 1]} })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_c_explicit() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          pos2 = pos;
          if (input.substr(pos, 3) === "cap") {
            result1 = "cap";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"cap\"");
            }
          }
          if (result1 !== null) {
            if (/^[\xEDi]/i.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[\\xEDi]i");
              }
            }
            if (result2 !== null) {
              if (input.substr(pos, 4) === "tulo") {
                result3 = "tulo";
                pos += 4;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"tulo\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 115) {
                  result4 = "s";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"s\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            if (input.charCodeAt(pos) === 99) {
              result1 = "c";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"c\"");
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 97) {
                result2 = "a";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"a\"");
                }
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                if (input.charCodeAt(pos) === 112) {
                  result3 = "p";
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"p\"");
                  }
                }
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 115) {
                    result4 = "s";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"s\"");
                    }
                  }
                  result4 = result4 !== null ? result4 : "";
                  if (result4 !== null) {
                    result5 = parse_abbrev();
                    result5 = result5 !== null ? result5 : "";
                    if (result5 !== null) {
                      result1 = [result1, result2, result3, result4, result5];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return {"type": "c_explicit"} })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_v_explicit() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          pos2 = pos;
          if (input.substr(pos, 4) === "vers") {
            result1 = "vers";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"vers\"");
            }
          }
          if (result1 !== null) {
            if (/^[\xEDi]/i.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[\\xEDi]i");
              }
            }
            if (result2 !== null) {
              if (input.substr(pos, 4) === "culo") {
                result3 = "culo";
                pos += 4;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"culo\"");
                }
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 115) {
                  result4 = "s";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"s\"");
                  }
                }
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result1 = [result1, result2, result3, result4];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 === null) {
            pos2 = pos;
            if (input.substr(pos, 2) === "vv") {
              result1 = "vv";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"vv\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_abbrev();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 === null) {
              pos2 = pos;
              if (input.substr(pos, 3) === "ver") {
                result1 = "ver";
                pos += 3;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ver\"");
                }
              }
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 115) {
                  result2 = "s";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"s\"");
                  }
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse_abbrev();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    result1 = [result1, result2, result3];
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
              if (result1 === null) {
                pos2 = pos;
                if (input.charCodeAt(pos) === 118) {
                  result1 = "v";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"v\"");
                  }
                }
                if (result1 !== null) {
                  if (input.charCodeAt(pos) === 115) {
                    result2 = "s";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"s\"");
                    }
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    if (input.charCodeAt(pos) === 115) {
                      result3 = "s";
                      pos++;
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"s\"");
                      }
                    }
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result4 = parse_abbrev();
                      result4 = result4 !== null ? result4 : "";
                      if (result4 !== null) {
                        result1 = [result1, result2, result3, result4];
                      } else {
                        result1 = null;
                        pos = pos2;
                      }
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return {"type": "v_explicit"} })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cv_sep() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 44) {
            result1 = ",";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cv_sep_weak() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          if (/^["']/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[\"']");
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_space();
        }
        return result0;
      }
      
      function parse_sequence_sep() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        if (/^[;\/:\-\u2013\u2014~]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[;\\/:\\-\\u2013\\u2014~]");
          }
        }
        if (result1 === null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            pos3 = pos;
            result2 = parse_sp();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result3 = ".";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result5 = ".";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos1;
            }
          } else {
            result1 = null;
            pos = pos1;
          }
          if (result1 === null) {
            if (input.charCodeAt(pos) === 121) {
              result1 = "y";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"y\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos) === 38) {
                result1 = "&";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&\"");
                }
              }
              if (result1 === null) {
                result1 = parse_space();
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[;\/:\-\u2013\u2014~]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[;\\/:\\-\\u2013\\u2014~]");
              }
            }
            if (result1 === null) {
              pos1 = pos;
              if (input.charCodeAt(pos) === 46) {
                result1 = ".";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result1 !== null) {
                pos2 = pos;
                reportFailures++;
                pos3 = pos;
                result2 = parse_sp();
                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result3 = ".";
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = parse_sp();
                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 46) {
                        result5 = ".";
                        pos++;
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\".\"");
                        }
                      }
                      if (result5 !== null) {
                        result2 = [result2, result3, result4, result5];
                      } else {
                        result2 = null;
                        pos = pos3;
                      }
                    } else {
                      result2 = null;
                      pos = pos3;
                    }
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = pos2;
                }
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }
              if (result1 === null) {
                if (input.charCodeAt(pos) === 121) {
                  result1 = "y";
                  pos++;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"y\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos) === 38) {
                    result1 = "&";
                    pos++;
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"&\"");
                    }
                  }
                  if (result1 === null) {
                    result1 = parse_space();
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_range_sep() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          pos1 = pos;
          if (/^[\-\u2013\u2014]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[\\-\\u2013\\u2014]");
            }
          }
          if (result2 !== null) {
            result3 = parse_sp();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
          if (result2 === null) {
            pos1 = pos;
            if (input.substr(pos, 2) === "to") {
              result2 = "to";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"to\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_sp();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos1;
              }
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 === null) {
              pos1 = pos;
              if (input.substr(pos, 1).toLowerCase() === "\xE1") {
                result2 = input.substr(pos, 1);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\xE1\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_sp();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              pos1 = pos;
              if (/^[\-\u2013\u2014]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\-\\u2013\\u2014]");
                }
              }
              if (result2 !== null) {
                result3 = parse_sp();
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }
              if (result2 === null) {
                pos1 = pos;
                if (input.substr(pos, 2) === "to") {
                  result2 = "to";
                  pos += 2;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"to\"");
                  }
                }
                if (result2 !== null) {
                  result3 = parse_sp();
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
                if (result2 === null) {
                  pos1 = pos;
                  if (input.substr(pos, 1).toLowerCase() === "\xE1") {
                    result2 = input.substr(pos, 1);
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\xE1\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = parse_sp();
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = pos1;
                    }
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_title() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["title"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_cv_sep();
          if (result1 === null) {
            result1 = parse_sequence_sep();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = pos;
            if (input.substr(pos, 3).toLowerCase() === "t\xEDt") {
              result2 = input.substr(pos, 3);
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"t\\xEDt\"");
              }
            }
            if (result2 !== null) {
              if (input.substr(pos, 3) === "ulo") {
                result3 = "ulo";
                pos += 3;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"ulo\"");
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {type:"title", value: [val], "indices": [indices["title"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_in_book_of() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          if (input.substr(pos, 2) === "en") {
            result1 = "en";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"en\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos, 2) === "de") {
              result1 = "de";
              pos += 2;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"de\"");
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_sp();
            if (result2 !== null) {
              pos1 = pos;
              if (input.substr(pos, 2) === "el") {
                result3 = "el";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"el\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  if (input.substr(pos, 5) === "libro") {
                    result5 = "libro";
                    pos += 5;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"libro\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_sp();
                    if (result6 !== null) {
                      if (input.substr(pos, 2) === "de") {
                        result7 = "de";
                        pos += 2;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"de\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse_sp();
                        if (result8 !== null) {
                          result3 = [result3, result4, result5, result6, result7, result8];
                        } else {
                          result3 = null;
                          pos = pos1;
                        }
                      } else {
                        result3 = null;
                        pos = pos1;
                      }
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }
              } else {
                result3 = null;
                pos = pos1;
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_abbrev() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        result0 = parse_sp();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            pos1 = pos;
            reportFailures++;
            pos2 = pos;
            result2 = parse_sp();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result3 = ".";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_sp();
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result5 = ".";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos1;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_translation_sequence_enclosed() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["translation_sequence_enclosed"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            if (/^[([]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[([]");
              }
            }
            if (result2 !== null) {
              result3 = parse_sp();
              if (result3 !== null) {
                pos2 = pos;
                result4 = parse_translation();
                if (result4 !== null) {
                  result5 = [];
                  pos3 = pos;
                  result6 = parse_sequence_sep();
                  if (result6 !== null) {
                    result7 = parse_translation();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                  } else {
                    result6 = null;
                    pos = pos3;
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos3 = pos;
                    result6 = parse_sequence_sep();
                    if (result6 !== null) {
                      result7 = parse_translation();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                  }
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result5 = parse_sp();
                  if (result5 !== null) {
                    if (/^[)\]]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[)\\]]");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "translation_sequence", "value": val, "indices": [indices["translation_sequence_enclosed"], pos - 1]} })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_translation_sequence() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["translation_sequence"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          result1 = parse_sp();
          if (result1 !== null) {
            pos2 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_sp();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = pos;
              result3 = parse_translation();
              if (result3 !== null) {
                result4 = [];
                pos3 = pos;
                result5 = parse_sequence_sep();
                if (result5 !== null) {
                  result6 = parse_translation();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                } else {
                  result5 = null;
                  pos = pos3;
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos3 = pos;
                  result5 = parse_sequence_sep();
                  if (result5 !== null) {
                    result6 = parse_translation();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = pos3;
                    }
                  } else {
                    result5 = null;
                    pos = pos3;
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = pos2;
                }
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "translation_sequence", "value": val, "indices": [indices["translation_sequence"], pos - 1]} })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_translation() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["translation"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 30) {
            result1 = "\x1E";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\x1E\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_any_integer();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 30) {
                result3 = "\x1E";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\x1E\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "translation", "value": val.value, "indices": [indices["translation"], pos - 1]} })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["integer"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          pos2 = pos;
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (/^[0-9]/.test(input.charAt(pos))) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (/^[0-9]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result2 === null) {
              if (input.substr(pos, 4) === ",000") {
                result2 = ",000";
                pos += 4;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\",000\"");
                }
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [indices["integer"], pos - 1]} })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_any_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["any_integer"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [indices["any_integer"], pos - 1]} })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_word() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) {indices["word"] = pos; return true})(pos) ? "" : null;
        if (result0 !== null) {
          if (/^[^\x1F\x1E]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\x1F\\x1E]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^\x1F\x1E]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\\x1F\\x1E]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, val) { return {"type": "word", "value": val.join(""), "indices": [indices["word"], pos - 1]} })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sp() {
        var result0;
        
        result0 = parse_space();
        result0 = result0 !== null ? result0 : "";
        return result0;
      }
      
      function parse_space() {
        var result0, result1;
        
        if (/^[ \t\r\n\xA0*]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\r\\n\\xA0*]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \t\r\n\xA0*]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\t\\r\\n\\xA0*]");
              }
            }
          }
        } else {
          result0 = null;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      var indices = {}
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
