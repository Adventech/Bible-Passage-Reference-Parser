var grammar = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "abbrev": parse_abbrev,
        "any_integer": parse_any_integer,
        "b": parse_b,
        "b_range": parse_b_range,
        "bc": parse_bc,
        "bc_comma": parse_bc_comma,
        "bc_title": parse_bc_title,
        "bcv": parse_bcv,
        "bcv_comma": parse_bcv_comma,
        "bcv_hyphen_range": parse_bcv_hyphen_range,
        "bcv_weak": parse_bcv_weak,
        "bv": parse_bv,
        "c": parse_c,
        "c_explicit": parse_c_explicit,
        "c_psalm": parse_c_psalm,
        "c_title": parse_c_title,
        "cb": parse_cb,
        "cb_ordinal": parse_cb_ordinal,
        "cb_range": parse_cb_range,
        "cbv": parse_cbv,
        "cbv_ordinal": parse_cbv_ordinal,
        "cv": parse_cv,
        "cv_psalm": parse_cv_psalm,
        "cv_sep": parse_cv_sep,
        "cv_sep_weak": parse_cv_sep_weak,
        "cv_weak": parse_cv_weak,
        "ff": parse_ff,
        "in_book_of": parse_in_book_of,
        "integer": parse_integer,
        "integer_title": parse_integer_title,
        "range": parse_range,
        "range_sep": parse_range_sep,
        "sequence": parse_sequence,
        "sequence_sep": parse_sequence_sep,
        "sp": parse_sp,
        "space": parse_space,
        "start": parse_start,
        "title": parse_title,
        "translation": parse_translation,
        "translation_sequence": parse_translation_sequence,
        "translation_sequence_enclosed": parse_translation_sequence_enclosed,
        "v": parse_v,
        "v_explicit": parse_v_explicit,
        "v_letter": parse_v_letter,
        "word": parse_word
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result32 = parse_bcv_hyphen_range();
        if (result32 !== null) {
          var result1 = result32;
        } else {
          var result31 = parse_sequence();
          if (result31 !== null) {
            var result1 = result31;
          } else {
            var result30 = parse_cb_range();
            if (result30 !== null) {
              var result1 = result30;
            } else {
              var result29 = parse_range();
              if (result29 !== null) {
                var result1 = result29;
              } else {
                var result28 = parse_ff();
                if (result28 !== null) {
                  var result1 = result28;
                } else {
                  var result27 = parse_bcv_comma();
                  if (result27 !== null) {
                    var result1 = result27;
                  } else {
                    var result26 = parse_bc_title();
                    if (result26 !== null) {
                      var result1 = result26;
                    } else {
                      var result25 = parse_bcv();
                      if (result25 !== null) {
                        var result1 = result25;
                      } else {
                        var result24 = parse_bcv_weak();
                        if (result24 !== null) {
                          var result1 = result24;
                        } else {
                          var result23 = parse_bc();
                          if (result23 !== null) {
                            var result1 = result23;
                          } else {
                            var result22 = parse_cv_psalm();
                            if (result22 !== null) {
                              var result1 = result22;
                            } else {
                              var result21 = parse_bv();
                              if (result21 !== null) {
                                var result1 = result21;
                              } else {
                                var result20 = parse_b_range();
                                if (result20 !== null) {
                                  var result1 = result20;
                                } else {
                                  var result19 = parse_c_psalm();
                                  if (result19 !== null) {
                                    var result1 = result19;
                                  } else {
                                    var result18 = parse_b();
                                    if (result18 !== null) {
                                      var result1 = result18;
                                    } else {
                                      var result17 = parse_cbv();
                                      if (result17 !== null) {
                                        var result1 = result17;
                                      } else {
                                        var result16 = parse_cbv_ordinal();
                                        if (result16 !== null) {
                                          var result1 = result16;
                                        } else {
                                          var result15 = parse_cb();
                                          if (result15 !== null) {
                                            var result1 = result15;
                                          } else {
                                            var result14 = parse_cb_ordinal();
                                            if (result14 !== null) {
                                              var result1 = result14;
                                            } else {
                                              var result13 = parse_translation_sequence_enclosed();
                                              if (result13 !== null) {
                                                var result1 = result13;
                                              } else {
                                                var result12 = parse_translation_sequence();
                                                if (result12 !== null) {
                                                  var result1 = result12;
                                                } else {
                                                  var result11 = parse_sequence_sep();
                                                  if (result11 !== null) {
                                                    var result1 = result11;
                                                  } else {
                                                    var result10 = parse_c_title();
                                                    if (result10 !== null) {
                                                      var result1 = result10;
                                                    } else {
                                                      var result9 = parse_integer_title();
                                                      if (result9 !== null) {
                                                        var result1 = result9;
                                                      } else {
                                                        var result8 = parse_cv();
                                                        if (result8 !== null) {
                                                          var result1 = result8;
                                                        } else {
                                                          var result7 = parse_cv_weak();
                                                          if (result7 !== null) {
                                                            var result1 = result7;
                                                          } else {
                                                            var result6 = parse_v_letter();
                                                            if (result6 !== null) {
                                                              var result1 = result6;
                                                            } else {
                                                              var result5 = parse_integer();
                                                              if (result5 !== null) {
                                                                var result1 = result5;
                                                              } else {
                                                                var result4 = parse_c();
                                                                if (result4 !== null) {
                                                                  var result1 = result4;
                                                                } else {
                                                                  var result3 = parse_v();
                                                                  if (result3 !== null) {
                                                                    var result1 = result3;
                                                                  } else {
                                                                    var result2 = parse_word();
                                                                    if (result2 !== null) {
                                                                      var result1 = result2;
                                                                    } else {
                                                                      var result1 = null;;
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result32 = parse_bcv_hyphen_range();
            if (result32 !== null) {
              var result1 = result32;
            } else {
              var result31 = parse_sequence();
              if (result31 !== null) {
                var result1 = result31;
              } else {
                var result30 = parse_cb_range();
                if (result30 !== null) {
                  var result1 = result30;
                } else {
                  var result29 = parse_range();
                  if (result29 !== null) {
                    var result1 = result29;
                  } else {
                    var result28 = parse_ff();
                    if (result28 !== null) {
                      var result1 = result28;
                    } else {
                      var result27 = parse_bcv_comma();
                      if (result27 !== null) {
                        var result1 = result27;
                      } else {
                        var result26 = parse_bc_title();
                        if (result26 !== null) {
                          var result1 = result26;
                        } else {
                          var result25 = parse_bcv();
                          if (result25 !== null) {
                            var result1 = result25;
                          } else {
                            var result24 = parse_bcv_weak();
                            if (result24 !== null) {
                              var result1 = result24;
                            } else {
                              var result23 = parse_bc();
                              if (result23 !== null) {
                                var result1 = result23;
                              } else {
                                var result22 = parse_cv_psalm();
                                if (result22 !== null) {
                                  var result1 = result22;
                                } else {
                                  var result21 = parse_bv();
                                  if (result21 !== null) {
                                    var result1 = result21;
                                  } else {
                                    var result20 = parse_b_range();
                                    if (result20 !== null) {
                                      var result1 = result20;
                                    } else {
                                      var result19 = parse_c_psalm();
                                      if (result19 !== null) {
                                        var result1 = result19;
                                      } else {
                                        var result18 = parse_b();
                                        if (result18 !== null) {
                                          var result1 = result18;
                                        } else {
                                          var result17 = parse_cbv();
                                          if (result17 !== null) {
                                            var result1 = result17;
                                          } else {
                                            var result16 = parse_cbv_ordinal();
                                            if (result16 !== null) {
                                              var result1 = result16;
                                            } else {
                                              var result15 = parse_cb();
                                              if (result15 !== null) {
                                                var result1 = result15;
                                              } else {
                                                var result14 = parse_cb_ordinal();
                                                if (result14 !== null) {
                                                  var result1 = result14;
                                                } else {
                                                  var result13 = parse_translation_sequence_enclosed();
                                                  if (result13 !== null) {
                                                    var result1 = result13;
                                                  } else {
                                                    var result12 = parse_translation_sequence();
                                                    if (result12 !== null) {
                                                      var result1 = result12;
                                                    } else {
                                                      var result11 = parse_sequence_sep();
                                                      if (result11 !== null) {
                                                        var result1 = result11;
                                                      } else {
                                                        var result10 = parse_c_title();
                                                        if (result10 !== null) {
                                                          var result1 = result10;
                                                        } else {
                                                          var result9 = parse_integer_title();
                                                          if (result9 !== null) {
                                                            var result1 = result9;
                                                          } else {
                                                            var result8 = parse_cv();
                                                            if (result8 !== null) {
                                                              var result1 = result8;
                                                            } else {
                                                              var result7 = parse_cv_weak();
                                                              if (result7 !== null) {
                                                                var result1 = result7;
                                                              } else {
                                                                var result6 = parse_v_letter();
                                                                if (result6 !== null) {
                                                                  var result1 = result6;
                                                                } else {
                                                                  var result5 = parse_integer();
                                                                  if (result5 !== null) {
                                                                    var result1 = result5;
                                                                  } else {
                                                                    var result4 = parse_c();
                                                                    if (result4 !== null) {
                                                                      var result1 = result4;
                                                                    } else {
                                                                      var result3 = parse_v();
                                                                      if (result3 !== null) {
                                                                        var result1 = result3;
                                                                      } else {
                                                                        var result2 = parse_word();
                                                                        if (result2 !== null) {
                                                                          var result1 = result2;
                                                                        } else {
                                                                          var result1 = null;;
                                                                        };
                                                                      };
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sequence() {
        var cacheKey = 'sequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["sequence"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result54 = parse_cb_range();
          if (result54 !== null) {
            var result4 = result54;
          } else {
            var result53 = parse_bcv_hyphen_range();
            if (result53 !== null) {
              var result4 = result53;
            } else {
              var result52 = parse_range();
              if (result52 !== null) {
                var result4 = result52;
              } else {
                var result51 = parse_ff();
                if (result51 !== null) {
                  var result4 = result51;
                } else {
                  var result50 = parse_bcv_comma();
                  if (result50 !== null) {
                    var result4 = result50;
                  } else {
                    var result49 = parse_bc_title();
                    if (result49 !== null) {
                      var result4 = result49;
                    } else {
                      var result48 = parse_bcv();
                      if (result48 !== null) {
                        var result4 = result48;
                      } else {
                        var result47 = parse_bcv_weak();
                        if (result47 !== null) {
                          var result4 = result47;
                        } else {
                          var result46 = parse_bc();
                          if (result46 !== null) {
                            var result4 = result46;
                          } else {
                            var result45 = parse_cv_psalm();
                            if (result45 !== null) {
                              var result4 = result45;
                            } else {
                              var result44 = parse_bv();
                              if (result44 !== null) {
                                var result4 = result44;
                              } else {
                                var result43 = parse_b_range();
                                if (result43 !== null) {
                                  var result4 = result43;
                                } else {
                                  var result42 = parse_c_psalm();
                                  if (result42 !== null) {
                                    var result4 = result42;
                                  } else {
                                    var result41 = parse_b();
                                    if (result41 !== null) {
                                      var result4 = result41;
                                    } else {
                                      var result40 = parse_cbv();
                                      if (result40 !== null) {
                                        var result4 = result40;
                                      } else {
                                        var result39 = parse_cbv_ordinal();
                                        if (result39 !== null) {
                                          var result4 = result39;
                                        } else {
                                          var result38 = parse_cb();
                                          if (result38 !== null) {
                                            var result4 = result38;
                                          } else {
                                            var result37 = parse_cb_ordinal();
                                            if (result37 !== null) {
                                              var result4 = result37;
                                            } else {
                                              var result4 = null;;
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result36 = parse_sequence_sep();
            if (result36 !== null) {
              var result7 = result36;
            } else {
              if (input.substr(pos, 0) === "") {
                var result35 = "";
                pos += 0;
              } else {
                var result35 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\"");
                }
              }
              if (result35 !== null) {
                var result7 = result35;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result34 = parse_cb_range();
              if (result34 !== null) {
                var result8 = result34;
              } else {
                var result33 = parse_bcv_hyphen_range();
                if (result33 !== null) {
                  var result8 = result33;
                } else {
                  var result32 = parse_range();
                  if (result32 !== null) {
                    var result8 = result32;
                  } else {
                    var result31 = parse_ff();
                    if (result31 !== null) {
                      var result8 = result31;
                    } else {
                      var result30 = parse_bcv_comma();
                      if (result30 !== null) {
                        var result8 = result30;
                      } else {
                        var result29 = parse_bc_title();
                        if (result29 !== null) {
                          var result8 = result29;
                        } else {
                          var result28 = parse_bcv();
                          if (result28 !== null) {
                            var result8 = result28;
                          } else {
                            var result27 = parse_bcv_weak();
                            if (result27 !== null) {
                              var result8 = result27;
                            } else {
                              var result26 = parse_bc();
                              if (result26 !== null) {
                                var result8 = result26;
                              } else {
                                var result25 = parse_cv_psalm();
                                if (result25 !== null) {
                                  var result8 = result25;
                                } else {
                                  var result24 = parse_bv();
                                  if (result24 !== null) {
                                    var result8 = result24;
                                  } else {
                                    var result23 = parse_b_range();
                                    if (result23 !== null) {
                                      var result8 = result23;
                                    } else {
                                      var result22 = parse_c_psalm();
                                      if (result22 !== null) {
                                        var result8 = result22;
                                      } else {
                                        var result21 = parse_b();
                                        if (result21 !== null) {
                                          var result8 = result21;
                                        } else {
                                          var result20 = parse_cbv();
                                          if (result20 !== null) {
                                            var result8 = result20;
                                          } else {
                                            var result19 = parse_cbv_ordinal();
                                            if (result19 !== null) {
                                              var result8 = result19;
                                            } else {
                                              var result18 = parse_cb();
                                              if (result18 !== null) {
                                                var result8 = result18;
                                              } else {
                                                var result17 = parse_cb_ordinal();
                                                if (result17 !== null) {
                                                  var result8 = result17;
                                                } else {
                                                  var result16 = parse_c_title();
                                                  if (result16 !== null) {
                                                    var result8 = result16;
                                                  } else {
                                                    var result15 = parse_integer_title();
                                                    if (result15 !== null) {
                                                      var result8 = result15;
                                                    } else {
                                                      var result14 = parse_cv();
                                                      if (result14 !== null) {
                                                        var result8 = result14;
                                                      } else {
                                                        var result13 = parse_cv_weak();
                                                        if (result13 !== null) {
                                                          var result8 = result13;
                                                        } else {
                                                          var result12 = parse_v_letter();
                                                          if (result12 !== null) {
                                                            var result8 = result12;
                                                          } else {
                                                            var result11 = parse_integer();
                                                            if (result11 !== null) {
                                                              var result8 = result11;
                                                            } else {
                                                              var result10 = parse_c();
                                                              if (result10 !== null) {
                                                                var result8 = result10;
                                                              } else {
                                                                var result9 = parse_v();
                                                                if (result9 !== null) {
                                                                  var result8 = result9;
                                                                } else {
                                                                  var result8 = null;;
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var savedPos2 = pos;
                var result36 = parse_sequence_sep();
                if (result36 !== null) {
                  var result7 = result36;
                } else {
                  if (input.substr(pos, 0) === "") {
                    var result35 = "";
                    pos += 0;
                  } else {
                    var result35 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"\"");
                    }
                  }
                  if (result35 !== null) {
                    var result7 = result35;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result34 = parse_cb_range();
                  if (result34 !== null) {
                    var result8 = result34;
                  } else {
                    var result33 = parse_bcv_hyphen_range();
                    if (result33 !== null) {
                      var result8 = result33;
                    } else {
                      var result32 = parse_range();
                      if (result32 !== null) {
                        var result8 = result32;
                      } else {
                        var result31 = parse_ff();
                        if (result31 !== null) {
                          var result8 = result31;
                        } else {
                          var result30 = parse_bcv_comma();
                          if (result30 !== null) {
                            var result8 = result30;
                          } else {
                            var result29 = parse_bc_title();
                            if (result29 !== null) {
                              var result8 = result29;
                            } else {
                              var result28 = parse_bcv();
                              if (result28 !== null) {
                                var result8 = result28;
                              } else {
                                var result27 = parse_bcv_weak();
                                if (result27 !== null) {
                                  var result8 = result27;
                                } else {
                                  var result26 = parse_bc();
                                  if (result26 !== null) {
                                    var result8 = result26;
                                  } else {
                                    var result25 = parse_cv_psalm();
                                    if (result25 !== null) {
                                      var result8 = result25;
                                    } else {
                                      var result24 = parse_bv();
                                      if (result24 !== null) {
                                        var result8 = result24;
                                      } else {
                                        var result23 = parse_b_range();
                                        if (result23 !== null) {
                                          var result8 = result23;
                                        } else {
                                          var result22 = parse_c_psalm();
                                          if (result22 !== null) {
                                            var result8 = result22;
                                          } else {
                                            var result21 = parse_b();
                                            if (result21 !== null) {
                                              var result8 = result21;
                                            } else {
                                              var result20 = parse_cbv();
                                              if (result20 !== null) {
                                                var result8 = result20;
                                              } else {
                                                var result19 = parse_cbv_ordinal();
                                                if (result19 !== null) {
                                                  var result8 = result19;
                                                } else {
                                                  var result18 = parse_cb();
                                                  if (result18 !== null) {
                                                    var result8 = result18;
                                                  } else {
                                                    var result17 = parse_cb_ordinal();
                                                    if (result17 !== null) {
                                                      var result8 = result17;
                                                    } else {
                                                      var result16 = parse_c_title();
                                                      if (result16 !== null) {
                                                        var result8 = result16;
                                                      } else {
                                                        var result15 = parse_integer_title();
                                                        if (result15 !== null) {
                                                          var result8 = result15;
                                                        } else {
                                                          var result14 = parse_cv();
                                                          if (result14 !== null) {
                                                            var result8 = result14;
                                                          } else {
                                                            var result13 = parse_cv_weak();
                                                            if (result13 !== null) {
                                                              var result8 = result13;
                                                            } else {
                                                              var result12 = parse_v_letter();
                                                              if (result12 !== null) {
                                                                var result8 = result12;
                                                              } else {
                                                                var result11 = parse_integer();
                                                                if (result11 !== null) {
                                                                  var result8 = result11;
                                                                } else {
                                                                  var result10 = parse_c();
                                                                  if (result10 !== null) {
                                                                    var result8 = result10;
                                                                  } else {
                                                                    var result9 = parse_v();
                                                                    if (result9 !== null) {
                                                                      var result8 = result9;
                                                                    } else {
                                                                      var result8 = null;;
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  }
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { val_2.unshift([val_1]); return {"type": "sequence", "value": val_2, "indices": [indices["sequence"], pos - 1]} })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_range() {
        var cacheKey = 'range@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["range"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result48 = parse_ff();
          if (result48 !== null) {
            var result4 = result48;
          } else {
            var result47 = parse_bcv_comma();
            if (result47 !== null) {
              var result4 = result47;
            } else {
              var result46 = parse_bc_title();
              if (result46 !== null) {
                var result4 = result46;
              } else {
                var result45 = parse_bcv();
                if (result45 !== null) {
                  var result4 = result45;
                } else {
                  var result44 = parse_bcv_weak();
                  if (result44 !== null) {
                    var result4 = result44;
                  } else {
                    var result43 = parse_bc();
                    if (result43 !== null) {
                      var result4 = result43;
                    } else {
                      var result42 = parse_cv_psalm();
                      if (result42 !== null) {
                        var result4 = result42;
                      } else {
                        var result41 = parse_bv();
                        if (result41 !== null) {
                          var result4 = result41;
                        } else {
                          var result40 = parse_cbv();
                          if (result40 !== null) {
                            var result4 = result40;
                          } else {
                            var result39 = parse_cbv_ordinal();
                            if (result39 !== null) {
                              var result4 = result39;
                            } else {
                              var result38 = parse_c_psalm();
                              if (result38 !== null) {
                                var result4 = result38;
                              } else {
                                var result37 = parse_cb();
                                if (result37 !== null) {
                                  var result4 = result37;
                                } else {
                                  var result36 = parse_cb_ordinal();
                                  if (result36 !== null) {
                                    var result4 = result36;
                                  } else {
                                    var result35 = parse_c_title();
                                    if (result35 !== null) {
                                      var result4 = result35;
                                    } else {
                                      var result34 = parse_integer_title();
                                      if (result34 !== null) {
                                        var result4 = result34;
                                      } else {
                                        var result33 = parse_cv();
                                        if (result33 !== null) {
                                          var result4 = result33;
                                        } else {
                                          var result32 = parse_cv_weak();
                                          if (result32 !== null) {
                                            var result4 = result32;
                                          } else {
                                            var result31 = parse_v_letter();
                                            if (result31 !== null) {
                                              var result4 = result31;
                                            } else {
                                              var result30 = parse_integer();
                                              if (result30 !== null) {
                                                var result4 = result30;
                                              } else {
                                                var result29 = parse_c();
                                                if (result29 !== null) {
                                                  var result4 = result29;
                                                } else {
                                                  var result28 = parse_v();
                                                  if (result28 !== null) {
                                                    var result4 = result28;
                                                  } else {
                                                    var result4 = null;;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_range_sep();
            if (result5 !== null) {
              var result27 = parse_ff();
              if (result27 !== null) {
                var result6 = result27;
              } else {
                var result26 = parse_bcv_comma();
                if (result26 !== null) {
                  var result6 = result26;
                } else {
                  var result25 = parse_bc_title();
                  if (result25 !== null) {
                    var result6 = result25;
                  } else {
                    var result24 = parse_bcv();
                    if (result24 !== null) {
                      var result6 = result24;
                    } else {
                      var result23 = parse_bcv_weak();
                      if (result23 !== null) {
                        var result6 = result23;
                      } else {
                        var result22 = parse_bc();
                        if (result22 !== null) {
                          var result6 = result22;
                        } else {
                          var result21 = parse_cv_psalm();
                          if (result21 !== null) {
                            var result6 = result21;
                          } else {
                            var result20 = parse_bv();
                            if (result20 !== null) {
                              var result6 = result20;
                            } else {
                              var result19 = parse_cbv();
                              if (result19 !== null) {
                                var result6 = result19;
                              } else {
                                var result18 = parse_cbv_ordinal();
                                if (result18 !== null) {
                                  var result6 = result18;
                                } else {
                                  var result17 = parse_c_psalm();
                                  if (result17 !== null) {
                                    var result6 = result17;
                                  } else {
                                    var result16 = parse_cb();
                                    if (result16 !== null) {
                                      var result6 = result16;
                                    } else {
                                      var result15 = parse_cb_ordinal();
                                      if (result15 !== null) {
                                        var result6 = result15;
                                      } else {
                                        var result14 = parse_c_title();
                                        if (result14 !== null) {
                                          var result6 = result14;
                                        } else {
                                          var result13 = parse_integer_title();
                                          if (result13 !== null) {
                                            var result6 = result13;
                                          } else {
                                            var result12 = parse_cv();
                                            if (result12 !== null) {
                                              var result6 = result12;
                                            } else {
                                              var result11 = parse_v_letter();
                                              if (result11 !== null) {
                                                var result6 = result11;
                                              } else {
                                                var result10 = parse_integer();
                                                if (result10 !== null) {
                                                  var result6 = result10;
                                                } else {
                                                  var result9 = parse_cv_weak();
                                                  if (result9 !== null) {
                                                    var result6 = result9;
                                                  } else {
                                                    var result8 = parse_c();
                                                    if (result8 !== null) {
                                                      var result6 = result8;
                                                    } else {
                                                      var result7 = parse_v();
                                                      if (result7 !== null) {
                                                        var result6 = result7;
                                                      } else {
                                                        var result6 = null;;
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "range", "value": [val_1, val_2], "indices": [indices["range"], pos - 1]} })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_b_range() {
        var cacheKey = 'b_range@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["b_range"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_b();
          if (result4 !== null) {
            var result5 = parse_range_sep();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var result14 = parse_range();
              if (result14 !== null) {
                var result8 = result14;
              } else {
                var result13 = parse_ff();
                if (result13 !== null) {
                  var result8 = result13;
                } else {
                  var result12 = parse_bcv();
                  if (result12 !== null) {
                    var result8 = result12;
                  } else {
                    var result11 = parse_bcv_weak();
                    if (result11 !== null) {
                      var result8 = result11;
                    } else {
                      var result10 = parse_bc();
                      if (result10 !== null) {
                        var result8 = result10;
                      } else {
                        var result9 = parse_bv();
                        if (result9 !== null) {
                          var result8 = result9;
                        } else {
                          var result8 = null;;
                        };
                      };
                    };
                  };
                };
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result8 === null) {
                var result6 = '';
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result7 = parse_b();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "b_range", "value": [val_1, val_2], "indices": [indices["b_range"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bcv_hyphen_range() {
        var cacheKey = 'bcv_hyphen_range@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bcv_hyphen_range"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_b();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "-") {
              var result13 = "-";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result13 !== null) {
              var result11 = result13;
            } else {
              var result12 = parse_space();
              if (result12 !== null) {
                var result11 = result12;
              } else {
                var result11 = null;;
              };
            }
            var result5 = result11 !== null ? result11 : '';
            if (result5 !== null) {
              var result6 = parse_c();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "-") {
                  var result7 = "-";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_v();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "-") {
                      var result9 = "-";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_v();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2, val_3, val_4) { return {"type": "range", "value": [{"type": "bcv", "value": [{"type": "bc", "value": [val_1, val_2], "indices": [val_1.indices[0], val_2.indices[1]]}, val_3], "indices": [val_1.indices[0], val_3.indices[1]]}, val_4], "indices": [indices["bcv_hyphen_range"], pos - 1]} })(result1[1], result1[3], result1[5], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_b() {
        var cacheKey = 'b@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["b"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos, 1) === "") {
            var result4 = "";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_any_integer();
            if (result5 !== null) {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "/") {
                var result9 = "/";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result9 !== null) {
                if (input.substr(pos).match(/^[a-z]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-z]");
                  }
                }
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === "") {
                  var result7 = "";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "b", "value": val.value, "indices": [indices["b"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bc() {
        var cacheKey = 'bc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bc"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_b();
          if (result4 !== null) {
            var savedPos2 = pos;
            var result15 = parse_v_explicit();
            if (result15 !== null) {
              var savedPos3 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var savedPos4 = pos;
              var result18 = parse_c();
              if (result18 !== null) {
                var result19 = parse_cv_sep();
                if (result19 !== null) {
                  var result20 = parse_v();
                  if (result20 !== null) {
                    var result17 = [result18, result19, result20];
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
              } else {
                var result17 = null;
                pos = savedPos4;
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result17 !== null) {
                var result16 = '';
                pos = savedPos3;
              } else {
                var result16 = null;
              }
              if (result16 !== null) {
                var result14 = [result15, result16];
              } else {
                var result14 = null;
                pos = savedPos2;
              }
            } else {
              var result14 = null;
              pos = savedPos2;
            }
            if (result14 !== null) {
              var result5 = result14;
            } else {
              var result13 = parse_cv_sep();
              if (result13 !== null) {
                var result12 = [];
                while (result13 !== null) {
                  result12.push(result13);
                  var result13 = parse_cv_sep();
                }
              } else {
                var result12 = null;
              }
              if (result12 !== null) {
                var result5 = result12;
              } else {
                var result11 = parse_cv_sep_weak();
                if (result11 !== null) {
                  var result10 = [];
                  while (result11 !== null) {
                    result10.push(result11);
                    var result11 = parse_cv_sep_weak();
                  }
                } else {
                  var result10 = null;
                }
                if (result10 !== null) {
                  var result5 = result10;
                } else {
                  var result9 = parse_range_sep();
                  if (result9 !== null) {
                    var result8 = [];
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_range_sep();
                    }
                  } else {
                    var result8 = null;
                  }
                  if (result8 !== null) {
                    var result5 = result8;
                  } else {
                    var result7 = parse_sp();
                    if (result7 !== null) {
                      var result5 = result7;
                    } else {
                      var result5 = null;;
                    };
                  };
                };
              };
            }
            if (result5 !== null) {
              var result6 = parse_c();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [indices["bc"], pos - 1]} })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bc_comma() {
        var cacheKey = 'bc_comma@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bc_comma"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_b();
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_sp();
                if (result7 !== null) {
                  var result8 = parse_c();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [indices["bc_comma"], pos - 1]} })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bc_title() {
        var cacheKey = 'bc_title@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bc_title"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_bc();
          if (result4 !== null) {
            var result5 = parse_title();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bc_title", "value": [val_1, val_2], "indices": [indices["bc_title"], pos - 1]} })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bcv() {
        var cacheKey = 'bcv@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bcv"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_bc();
          if (result4 !== null) {
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var savedPos4 = pos;
            if (input.substr(pos, 1) === ".") {
              var result18 = ".";
              pos += 1;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result18 !== null) {
              var result19 = parse_v_explicit();
              if (result19 !== null) {
                var result20 = parse_v();
                if (result20 !== null) {
                  var result17 = [result18, result19, result20];
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
              } else {
                var result17 = null;
                pos = savedPos4;
              }
            } else {
              var result17 = null;
              pos = savedPos4;
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result17 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos3;
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result16 = parse_cv_sep();
              if (result16 !== null) {
                var result14 = result16;
              } else {
                var result15 = parse_sequence_sep();
                if (result15 !== null) {
                  var result14 = result15;
                } else {
                  var result14 = null;;
                };
              }
              var result12 = result14 !== null ? result14 : '';
              if (result12 !== null) {
                var result13 = parse_v_explicit();
                if (result13 !== null) {
                  var result11 = [result12, result13];
                } else {
                  var result11 = null;
                  pos = savedPos2;
                }
              } else {
                var result11 = null;
                pos = savedPos2;
              }
              if (result11 !== null) {
                var result6 = result11;
              } else {
                var result10 = parse_cv_sep();
                if (result10 !== null) {
                  var result6 = result10;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var result9 = parse_v_letter();
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_v();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bcv_weak() {
        var cacheKey = 'bcv_weak@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bcv_weak"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_bc();
          if (result4 !== null) {
            var result5 = parse_cv_sep_weak();
            if (result5 !== null) {
              var result12 = parse_v_letter();
              if (result12 !== null) {
                var result6 = result12;
              } else {
                var result11 = parse_v();
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var savedPos3 = pos;
                var result9 = parse_cv_sep();
                if (result9 !== null) {
                  var result10 = parse_v();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result8 === null) {
                  var result7 = '';
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv_weak"], pos - 1]} })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bcv_comma() {
        var cacheKey = 'bcv_comma@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bcv_comma"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_bc_comma();
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_sp();
                if (result7 !== null) {
                  var result14 = parse_v_letter();
                  if (result14 !== null) {
                    var result8 = result14;
                  } else {
                    var result13 = parse_v();
                    if (result13 !== null) {
                      var result8 = result13;
                    } else {
                      var result8 = null;;
                    };
                  }
                  if (result8 !== null) {
                    var savedPos2 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos3 = pos;
                    var result11 = parse_cv_sep();
                    if (result11 !== null) {
                      var result12 = parse_v();
                      if (result12 !== null) {
                        var result10 = [result11, result12];
                      } else {
                        var result10 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result10 === null) {
                      var result9 = '';
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["bcv_comma"], pos - 1]} })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bv() {
        var cacheKey = 'bv@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["bv"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_b();
          if (result4 !== null) {
            var result20 = parse_cv_sep();
            if (result20 !== null) {
              var result19 = [];
              while (result20 !== null) {
                result19.push(result20);
                var result20 = parse_cv_sep();
              }
            } else {
              var result19 = null;
            }
            if (result19 !== null) {
              var result5 = result19;
            } else {
              var result18 = parse_cv_sep_weak();
              if (result18 !== null) {
                var result17 = [];
                while (result18 !== null) {
                  result17.push(result18);
                  var result18 = parse_cv_sep_weak();
                }
              } else {
                var result17 = null;
              }
              if (result17 !== null) {
                var result5 = result17;
              } else {
                var result16 = parse_range_sep();
                if (result16 !== null) {
                  var result15 = [];
                  while (result16 !== null) {
                    result15.push(result16);
                    var result16 = parse_range_sep();
                  }
                } else {
                  var result15 = null;
                }
                if (result15 !== null) {
                  var result5 = result15;
                } else {
                  var savedPos2 = pos;
                  var result14 = parse_sequence_sep();
                  if (result14 !== null) {
                    var result11 = [];
                    while (result14 !== null) {
                      result11.push(result14);
                      var result14 = parse_sequence_sep();
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    var savedPos3 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    var result13 = parse_v_explicit();
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result13 !== null) {
                      var result12 = '';
                      pos = savedPos3;
                    } else {
                      var result12 = null;
                    }
                    if (result12 !== null) {
                      var result10 = [result11, result12];
                    } else {
                      var result10 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos2;
                  }
                  if (result10 !== null) {
                    var result5 = result10;
                  } else {
                    var result9 = parse_sp();
                    if (result9 !== null) {
                      var result5 = result9;
                    } else {
                      var result5 = null;;
                    };
                  };
                };
              };
            }
            if (result5 !== null) {
              var result8 = parse_v_letter();
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result7 = parse_v();
                if (result7 !== null) {
                  var result6 = result7;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bv", "value": [val_1, val_2], "indices": [indices["bv"], pos - 1]} })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cb() {
        var cacheKey = 'cb@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cb"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c_explicit();
          if (result4 !== null) {
            var result5 = parse_c();
            if (result5 !== null) {
              var result8 = parse_in_book_of();
              var result6 = result8 !== null ? result8 : '';
              if (result6 !== null) {
                var result7 = parse_b();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [indices["cb"], pos - 1]} })(result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cb_range() {
        var cacheKey = 'cb_range@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cb_range"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c_explicit();
          if (result4 !== null) {
            var result5 = parse_c();
            if (result5 !== null) {
              var result6 = parse_range_sep();
              if (result6 !== null) {
                var result7 = parse_c();
                if (result7 !== null) {
                  var result10 = parse_in_book_of();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_b();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2, val_3) { return {"type": "cb_range", "value": [val_3, val_1, val_2], "indices": [indices["cb_range"], pos - 1]} })(result1[2], result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cbv() {
        var cacheKey = 'cbv@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cbv"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_cb();
          if (result4 !== null) {
            var result8 = parse_sequence_sep();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result6 = parse_v_explicit();
              if (result6 !== null) {
                var result7 = parse_v();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["cbv"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cb_ordinal() {
        var cacheKey = 'cb_ordinal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cb_ordinal"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "th") {
              var result12 = "th";
              pos += 2;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"th\"");
              }
            }
            if (result12 !== null) {
              var result5 = result12;
            } else {
              if (input.substr(pos, 2) === "nd") {
                var result11 = "nd";
                pos += 2;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"nd\"");
                }
              }
              if (result11 !== null) {
                var result5 = result11;
              } else {
                if (input.substr(pos, 2) === "st") {
                  var result10 = "st";
                  pos += 2;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"st\"");
                  }
                }
                if (result10 !== null) {
                  var result5 = result10;
                } else {
                  var result5 = null;;
                };
              };
            }
            if (result5 !== null) {
              var result6 = parse_c_explicit();
              if (result6 !== null) {
                var result9 = parse_in_book_of();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_b();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [indices["cb_ordinal"], pos - 1]} })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cbv_ordinal() {
        var cacheKey = 'cbv_ordinal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cbv_ordinal"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_cb_ordinal();
          if (result4 !== null) {
            var result8 = parse_sequence_sep();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result6 = parse_v_explicit();
              if (result6 !== null) {
                var result7 = parse_v();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [indices["cbv_ordinal"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c_psalm() {
        var cacheKey = 'c_psalm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["c_psalm"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos, 1) === "") {
            var result4 = "";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_integer();
            if (result5 !== null) {
              if (input.substr(pos, 3) === "/p") {
                var result6 = "/p";
                pos += 3;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/p\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "c_psalm", "value": val.value, "indices": [indices["c_psalm"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cv_psalm() {
        var cacheKey = 'cv_psalm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cv_psalm"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c_psalm();
          if (result4 !== null) {
            var result8 = parse_sequence_sep();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result6 = parse_v_explicit();
              if (result6 !== null) {
                var result7 = parse_v();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "cv_psalm", "value": [val_1, val_2], "indices": [indices["cv_psalm"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c_title() {
        var cacheKey = 'c_title@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["c_title"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c_explicit();
          if (result4 !== null) {
            var result5 = parse_c();
            if (result5 !== null) {
              var result6 = parse_title();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "c_title", "value": [val_1, val_2], "indices": [indices["c_title"], pos - 1]} })(result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cv() {
        var cacheKey = 'cv@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cv"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c();
          if (result4 !== null) {
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var savedPos4 = pos;
            if (input.substr(pos, 1) === ".") {
              var result16 = ".";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result16 !== null) {
              var result17 = parse_v_explicit();
              if (result17 !== null) {
                var result18 = parse_v();
                if (result18 !== null) {
                  var result15 = [result16, result17, result18];
                } else {
                  var result15 = null;
                  pos = savedPos4;
                }
              } else {
                var result15 = null;
                pos = savedPos4;
              }
            } else {
              var result15 = null;
              pos = savedPos4;
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result15 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos3;
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result14 = parse_cv_sep();
              var result12 = result14 !== null ? result14 : '';
              if (result12 !== null) {
                var result13 = parse_v_explicit();
                if (result13 !== null) {
                  var result11 = [result12, result13];
                } else {
                  var result11 = null;
                  pos = savedPos2;
                }
              } else {
                var result11 = null;
                pos = savedPos2;
              }
              if (result11 !== null) {
                var result6 = result11;
              } else {
                var result10 = parse_cv_sep();
                if (result10 !== null) {
                  var result6 = result10;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var result9 = parse_v_letter();
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_v();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [indices["cv"], pos - 1]} })(result1[1], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cv_weak() {
        var cacheKey = 'cv_weak@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["cv_weak"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_c();
          if (result4 !== null) {
            var result5 = parse_cv_sep_weak();
            if (result5 !== null) {
              var result12 = parse_v_letter();
              if (result12 !== null) {
                var result6 = result12;
              } else {
                var result11 = parse_v();
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var savedPos3 = pos;
                var result9 = parse_cv_sep();
                if (result9 !== null) {
                  var result10 = parse_v();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result8 === null) {
                  var result7 = '';
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [indices["cv_weak"], pos - 1]} })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c() {
        var cacheKey = 'c@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["c"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result6 = parse_c_explicit();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            var result5 = parse_integer();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "c", "value": [val], "indices": [indices["c"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer_title() {
        var cacheKey = 'integer_title@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["integer_title"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_integer();
          if (result4 !== null) {
            var result9 = parse_cv_sep();
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result8 = parse_sequence_sep();
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            }
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              if (input.substr(pos, 5) === "title") {
                var result6 = "title";
                pos += 5;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"title\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1) { return {"type": "integer_title", "value": [val_1], "indices": [indices["integer_title"], pos - 1]} })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_v_letter() {
        var cacheKey = 'v_letter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["v_letter"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result10 = parse_v_explicit();
          var result4 = result10 !== null ? result10 : '';
          if (result4 !== null) {
            var result5 = parse_integer();
            if (result5 !== null) {
              var result6 = parse_sp();
              if (result6 !== null) {
                if (input.substr(pos).match(/^[a-e]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-e]");
                  }
                }
                if (result7 !== null) {
                  var savedPos2 = pos;
                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                  reportMatchFailures = false;
                  if (input.substr(pos).match(/^[a-z]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-z]");
                    }
                  }
                  reportMatchFailures = savedReportMatchFailuresVar0;
                  if (result9 === null) {
                    var result8 = '';
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "v", "value": [val], "indices": [indices["v_letter"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_v() {
        var cacheKey = 'v@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["v"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result6 = parse_v_explicit();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            var result5 = parse_integer();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "v", "value": [val], "indices": [indices["v"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ff() {
        var cacheKey = 'ff@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["ff"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result20 = parse_bcv();
          if (result20 !== null) {
            var result4 = result20;
          } else {
            var result19 = parse_bcv_weak();
            if (result19 !== null) {
              var result4 = result19;
            } else {
              var result18 = parse_bc();
              if (result18 !== null) {
                var result4 = result18;
              } else {
                var result17 = parse_cv();
                if (result17 !== null) {
                  var result4 = result17;
                } else {
                  var result16 = parse_cv_weak();
                  if (result16 !== null) {
                    var result4 = result16;
                  } else {
                    var result15 = parse_integer();
                    if (result15 !== null) {
                      var result4 = result15;
                    } else {
                      var result14 = parse_c();
                      if (result14 !== null) {
                        var result4 = result14;
                      } else {
                        var result13 = parse_v();
                        if (result13 !== null) {
                          var result4 = result13;
                        } else {
                          var result4 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "f") {
                var result6 = "f";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"f\"");
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "f") {
                  var result12 = "f";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"f\"");
                  }
                }
                var result7 = result12 !== null ? result12 : '';
                if (result7 !== null) {
                  var result11 = parse_abbrev();
                  var result8 = result11 !== null ? result11 : '';
                  if (result8 !== null) {
                    var savedPos2 = pos;
                    var savedReportMatchFailuresVar0 = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos).match(/^[A-Za-z]/) !== null) {
                      var result10 = input.charAt(pos);
                      pos++;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("[A-Za-z]");
                      }
                    }
                    reportMatchFailures = savedReportMatchFailuresVar0;
                    if (result10 === null) {
                      var result9 = '';
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val_1) { return {"type": "ff", "value": [val_1], "indices": [indices["ff"], pos - 1]} })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_c_explicit() {
        var cacheKey = 'c_explicit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var savedPos4 = pos;
          if (input.substr(pos, 7) === "chapter") {
            var result26 = "chapter";
            pos += 7;
          } else {
            var result26 = null;
            if (reportMatchFailures) {
              matchFailed("\"chapter\"");
            }
          }
          if (result26 !== null) {
            if (input.substr(pos, 1) === "s") {
              var result28 = "s";
              pos += 1;
            } else {
              var result28 = null;
              if (reportMatchFailures) {
                matchFailed("\"s\"");
              }
            }
            var result27 = result28 !== null ? result28 : '';
            if (result27 !== null) {
              var result25 = [result26, result27];
            } else {
              var result25 = null;
              pos = savedPos4;
            }
          } else {
            var result25 = null;
            pos = savedPos4;
          }
          if (result25 !== null) {
            var result4 = result25;
          } else {
            var savedPos3 = pos;
            if (input.substr(pos, 2) === "ch") {
              var result17 = "ch";
              pos += 2;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"ch\"");
              }
            }
            if (result17 !== null) {
              if (input.substr(pos, 1) === "a") {
                var result24 = "a";
                pos += 1;
              } else {
                var result24 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              var result18 = result24 !== null ? result24 : '';
              if (result18 !== null) {
                if (input.substr(pos, 2) === "pt") {
                  var result19 = "pt";
                  pos += 2;
                } else {
                  var result19 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"pt\"");
                  }
                }
                if (result19 !== null) {
                  if (input.substr(pos, 1) === "s") {
                    var result23 = "s";
                    pos += 1;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"s\"");
                    }
                  }
                  var result20 = result23 !== null ? result23 : '';
                  if (result20 !== null) {
                    var result22 = parse_abbrev();
                    var result21 = result22 !== null ? result22 : '';
                    if (result21 !== null) {
                      var result16 = [result17, result18, result19, result20, result21];
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
              } else {
                var result16 = null;
                pos = savedPos3;
              }
            } else {
              var result16 = null;
              pos = savedPos3;
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 2) === "ch") {
                var result7 = "ch";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ch\"");
                }
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === "a") {
                  var result15 = "a";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                var result8 = result15 !== null ? result15 : '';
                if (result8 !== null) {
                  if (input.substr(pos, 1) === "p") {
                    var result14 = "p";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"p\"");
                    }
                  }
                  var result9 = result14 !== null ? result14 : '';
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === "s") {
                      var result13 = "s";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"s\"");
                      }
                    }
                    var result10 = result13 !== null ? result13 : '';
                    if (result10 !== null) {
                      var result12 = parse_abbrev();
                      var result11 = result12 !== null ? result12 : '';
                      if (result11 !== null) {
                        var result6 = [result7, result8, result9, result10, result11];
                      } else {
                        var result6 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;;
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return {"type": "c_explicit"} })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_v_explicit() {
        var cacheKey = 'v_explicit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          var savedPos5 = pos;
          if (input.substr(pos, 5) === "verse") {
            var result23 = "verse";
            pos += 5;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("\"verse\"");
            }
          }
          if (result23 !== null) {
            if (input.substr(pos, 1) === "s") {
              var result25 = "s";
              pos += 1;
            } else {
              var result25 = null;
              if (reportMatchFailures) {
                matchFailed("\"s\"");
              }
            }
            var result24 = result25 !== null ? result25 : '';
            if (result24 !== null) {
              var result22 = [result23, result24];
            } else {
              var result22 = null;
              pos = savedPos5;
            }
          } else {
            var result22 = null;
            pos = savedPos5;
          }
          if (result22 !== null) {
            var result4 = result22;
          } else {
            var savedPos4 = pos;
            if (input.substr(pos, 2) === "vv") {
              var result19 = "vv";
              pos += 2;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"vv\"");
              }
            }
            if (result19 !== null) {
              var result21 = parse_abbrev();
              var result20 = result21 !== null ? result21 : '';
              if (result20 !== null) {
                var result18 = [result19, result20];
              } else {
                var result18 = null;
                pos = savedPos4;
              }
            } else {
              var result18 = null;
              pos = savedPos4;
            }
            if (result18 !== null) {
              var result4 = result18;
            } else {
              var savedPos3 = pos;
              if (input.substr(pos, 3) === "ver") {
                var result15 = "ver";
                pos += 3;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ver\"");
                }
              }
              if (result15 !== null) {
                var result17 = parse_abbrev();
                var result16 = result17 !== null ? result17 : '';
                if (result16 !== null) {
                  var result14 = [result15, result16];
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "v") {
                  var result7 = "v";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"v\"");
                  }
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "s") {
                    var result13 = "s";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"s\"");
                    }
                  }
                  var result8 = result13 !== null ? result13 : '';
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "s") {
                      var result12 = "s";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"s\"");
                      }
                    }
                    var result9 = result12 !== null ? result12 : '';
                    if (result9 !== null) {
                      var result11 = parse_abbrev();
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  var result4 = null;;
                };
              };
            };
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return {"type": "v_explicit"} })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cv_sep() {
        var cacheKey = 'cv_sep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_sp();
        if (result1 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result13 = ":";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result13 !== null) {
            var result12 = [];
            while (result13 !== null) {
              result12.push(result13);
              if (input.substr(pos, 1) === ":") {
                var result13 = ":";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
            }
          } else {
            var result12 = null;
          }
          if (result12 !== null) {
            var result2 = result12;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              var savedPos3 = pos;
              var result8 = parse_sp();
              if (result8 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result9 = ".";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_sp();
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === ".") {
                      var result11 = ".";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\".\"");
                      }
                    }
                    if (result11 !== null) {
                      var result7 = [result8, result9, result10, result11];
                    } else {
                      var result7 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 === null) {
                var result6 = '';
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result3 = parse_sp();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cv_sep_weak() {
        var cacheKey = 'cv_sep_weak@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_sp();
        if (result3 !== null) {
          if (input.substr(pos).match(/^["']/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[\"']");
            }
          }
          if (result4 !== null) {
            var result5 = parse_sp();
            if (result5 !== null) {
              var result2 = [result3, result4, result5];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_space();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sequence_sep() {
        var cacheKey = 'sequence_sep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[,;\/:\-\u2013\u2014~]/) !== null) {
          var result22 = input.charAt(pos);
          pos++;
        } else {
          var result22 = null;
          if (reportMatchFailures) {
            matchFailed("[,;\\/:\\-\\u2013\\u2014~]");
          }
        }
        if (result22 !== null) {
          var result3 = result22;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result15 !== null) {
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var savedPos4 = pos;
            var result18 = parse_sp();
            if (result18 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result19 = ".";
                pos += 1;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result19 !== null) {
                var result20 = parse_sp();
                if (result20 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result21 = ".";
                    pos += 1;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result21 !== null) {
                    var result17 = [result18, result19, result20, result21];
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
              } else {
                var result17 = null;
                pos = savedPos4;
              }
            } else {
              var result17 = null;
              pos = savedPos4;
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result17 === null) {
              var result16 = '';
            } else {
              var result16 = null;
              pos = savedPos3;
            }
            if (result16 !== null) {
              var result14 = [result15, result16];
            } else {
              var result14 = null;
              pos = savedPos2;
            }
          } else {
            var result14 = null;
            pos = savedPos2;
          }
          if (result14 !== null) {
            var result3 = result14;
          } else {
            if (input.substr(pos, 3) === "see") {
              var result13 = "see";
              pos += 3;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"see\"");
              }
            }
            if (result13 !== null) {
              var result3 = result13;
            } else {
              if (input.substr(pos, 7) === "compare") {
                var result12 = "compare";
                pos += 7;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"compare\"");
                }
              }
              if (result12 !== null) {
                var result3 = result12;
              } else {
                var savedPos1 = pos;
                if (input.substr(pos, 2) === "cf") {
                  var result9 = "cf";
                  pos += 2;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"cf\"");
                  }
                }
                if (result9 !== null) {
                  var result11 = parse_abbrev();
                  var result10 = result11 !== null ? result11 : '';
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  if (input.substr(pos, 3) === "and") {
                    var result7 = "and";
                    pos += 3;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"and\"");
                    }
                  }
                  if (result7 !== null) {
                    var result3 = result7;
                  } else {
                    if (input.substr(pos, 4) === "also") {
                      var result6 = "also";
                      pos += 4;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"also\"");
                      }
                    }
                    if (result6 !== null) {
                      var result3 = result6;
                    } else {
                      if (input.substr(pos, 1) === "&") {
                        var result5 = "&";
                        pos += 1;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"&\"");
                        }
                      }
                      if (result5 !== null) {
                        var result3 = result5;
                      } else {
                        var result4 = parse_space();
                        if (result4 !== null) {
                          var result3 = result4;
                        } else {
                          var result3 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[,;\/:\-\u2013\u2014~]/) !== null) {
              var result22 = input.charAt(pos);
              pos++;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("[,;\\/:\\-\\u2013\\u2014~]");
              }
            }
            if (result22 !== null) {
              var result3 = result22;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ".") {
                var result15 = ".";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result15 !== null) {
                var savedPos3 = pos;
                var savedReportMatchFailuresVar0 = reportMatchFailures;
                reportMatchFailures = false;
                var savedPos4 = pos;
                var result18 = parse_sp();
                if (result18 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result19 = ".";
                    pos += 1;
                  } else {
                    var result19 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result19 !== null) {
                    var result20 = parse_sp();
                    if (result20 !== null) {
                      if (input.substr(pos, 1) === ".") {
                        var result21 = ".";
                        pos += 1;
                      } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                          matchFailed("\".\"");
                        }
                      }
                      if (result21 !== null) {
                        var result17 = [result18, result19, result20, result21];
                      } else {
                        var result17 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
                reportMatchFailures = savedReportMatchFailuresVar0;
                if (result17 === null) {
                  var result16 = '';
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
                if (result16 !== null) {
                  var result14 = [result15, result16];
                } else {
                  var result14 = null;
                  pos = savedPos2;
                }
              } else {
                var result14 = null;
                pos = savedPos2;
              }
              if (result14 !== null) {
                var result3 = result14;
              } else {
                if (input.substr(pos, 3) === "see") {
                  var result13 = "see";
                  pos += 3;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"see\"");
                  }
                }
                if (result13 !== null) {
                  var result3 = result13;
                } else {
                  if (input.substr(pos, 7) === "compare") {
                    var result12 = "compare";
                    pos += 7;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"compare\"");
                    }
                  }
                  if (result12 !== null) {
                    var result3 = result12;
                  } else {
                    var savedPos1 = pos;
                    if (input.substr(pos, 2) === "cf") {
                      var result9 = "cf";
                      pos += 2;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"cf\"");
                      }
                    }
                    if (result9 !== null) {
                      var result11 = parse_abbrev();
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result8 = [result9, result10];
                      } else {
                        var result8 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                    if (result8 !== null) {
                      var result3 = result8;
                    } else {
                      if (input.substr(pos, 3) === "and") {
                        var result7 = "and";
                        pos += 3;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"and\"");
                        }
                      }
                      if (result7 !== null) {
                        var result3 = result7;
                      } else {
                        if (input.substr(pos, 4) === "also") {
                          var result6 = "also";
                          pos += 4;
                        } else {
                          var result6 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"also\"");
                          }
                        }
                        if (result6 !== null) {
                          var result3 = result6;
                        } else {
                          if (input.substr(pos, 1) === "&") {
                            var result5 = "&";
                            pos += 1;
                          } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"&\"");
                            }
                          }
                          if (result5 !== null) {
                            var result3 = result5;
                          } else {
                            var result4 = parse_space();
                            if (result4 !== null) {
                              var result3 = result4;
                            } else {
                              var result3 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function() { return "" })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_range_sep() {
        var cacheKey = 'range_sep@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_sp();
        if (result1 !== null) {
          var savedPos4 = pos;
          if (input.substr(pos).match(/^[\-\u2013\u2014]/) !== null) {
            var result14 = input.charAt(pos);
            pos++;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("[\\-\\u2013\\u2014]");
            }
          }
          if (result14 !== null) {
            var result15 = parse_sp();
            if (result15 !== null) {
              var result13 = [result14, result15];
            } else {
              var result13 = null;
              pos = savedPos4;
            }
          } else {
            var result13 = null;
            pos = savedPos4;
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var savedPos3 = pos;
            if (input.substr(pos, 7) === "through") {
              var result11 = "through";
              pos += 7;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"through\"");
              }
            }
            if (result11 !== null) {
              var result12 = parse_sp();
              if (result12 !== null) {
                var result10 = [result11, result12];
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
            if (result10 !== null) {
              var result3 = result10;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 4) === "thru") {
                var result8 = "thru";
                pos += 4;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"thru\"");
                }
              }
              if (result8 !== null) {
                var result9 = parse_sp();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              if (result7 !== null) {
                var result3 = result7;
              } else {
                var savedPos1 = pos;
                if (input.substr(pos, 2) === "to") {
                  var result5 = "to";
                  pos += 2;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"to\"");
                  }
                }
                if (result5 !== null) {
                  var result6 = parse_sp();
                  if (result6 !== null) {
                    var result4 = [result5, result6];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              var savedPos4 = pos;
              if (input.substr(pos).match(/^[\-\u2013\u2014]/) !== null) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\-\\u2013\\u2014]");
                }
              }
              if (result14 !== null) {
                var result15 = parse_sp();
                if (result15 !== null) {
                  var result13 = [result14, result15];
                } else {
                  var result13 = null;
                  pos = savedPos4;
                }
              } else {
                var result13 = null;
                pos = savedPos4;
              }
              if (result13 !== null) {
                var result3 = result13;
              } else {
                var savedPos3 = pos;
                if (input.substr(pos, 7) === "through") {
                  var result11 = "through";
                  pos += 7;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"through\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse_sp();
                  if (result12 !== null) {
                    var result10 = [result11, result12];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                if (result10 !== null) {
                  var result3 = result10;
                } else {
                  var savedPos2 = pos;
                  if (input.substr(pos, 4) === "thru") {
                    var result8 = "thru";
                    pos += 4;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"thru\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_sp();
                    if (result9 !== null) {
                      var result7 = [result8, result9];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                  if (result7 !== null) {
                    var result3 = result7;
                  } else {
                    var savedPos1 = pos;
                    if (input.substr(pos, 2) === "to") {
                      var result5 = "to";
                      pos += 2;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"to\"");
                      }
                    }
                    if (result5 !== null) {
                      var result6 = parse_sp();
                      if (result6 !== null) {
                        var result4 = [result5, result6];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                    if (result4 !== null) {
                      var result3 = result4;
                    } else {
                      var result3 = null;;
                    };
                  };
                };
              }
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_title() {
        var cacheKey = 'title@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["title"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result8 = parse_cv_sep();
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_sequence_sep();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            if (input.substr(pos, 5) === "title") {
              var result5 = "title";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"title\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {type:"title", value: [val], "indices": [indices["title"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_in_book_of() {
        var cacheKey = 'in_book_of@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_sp();
        if (result1 !== null) {
          if (input.substr(pos, 4) === "from") {
            var result14 = "from";
            pos += 4;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"from\"");
            }
          }
          if (result14 !== null) {
            var result2 = result14;
          } else {
            if (input.substr(pos, 2) === "of") {
              var result13 = "of";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"of\"");
              }
            }
            if (result13 !== null) {
              var result2 = result13;
            } else {
              if (input.substr(pos, 2) === "in") {
                var result12 = "in";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"in\"");
                }
              }
              if (result12 !== null) {
                var result2 = result12;
              } else {
                var result2 = null;;
              };
            };
          }
          if (result2 !== null) {
            var result3 = parse_sp();
            if (result3 !== null) {
              var savedPos1 = pos;
              if (input.substr(pos, 3) === "the") {
                var result6 = "the";
                pos += 3;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"the\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_sp();
                if (result7 !== null) {
                  if (input.substr(pos, 4) === "book") {
                    var result8 = "book";
                    pos += 4;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"book\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_sp();
                    if (result9 !== null) {
                      if (input.substr(pos, 2) === "of") {
                        var result10 = "of";
                        pos += 2;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"of\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_sp();
                        if (result11 !== null) {
                          var result5 = [result6, result7, result8, result9, result10, result11];
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result0 = [result1, result2, result3, result4];
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_abbrev() {
        var cacheKey = 'abbrev@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_sp();
        if (result1 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result2 = ".";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var savedPos2 = pos;
            var result5 = parse_sp();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result6 = ".";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_sp();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result8 = ".";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos2;
                }
              } else {
                var result4 = null;
                pos = savedPos2;
              }
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result4 === null) {
              var result3 = '';
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_translation_sequence_enclosed() {
        var cacheKey = 'translation_sequence_enclosed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["translation_sequence_enclosed"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_sp();
          if (result4 !== null) {
            if (input.substr(pos).match(/^[([]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[([]");
              }
            }
            if (result5 !== null) {
              var result6 = parse_sp();
              if (result6 !== null) {
                var savedPos2 = pos;
                var result10 = parse_translation();
                if (result10 !== null) {
                  var result11 = [];
                  var savedPos3 = pos;
                  var result13 = parse_sequence_sep();
                  if (result13 !== null) {
                    var result14 = parse_translation();
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  while (result12 !== null) {
                    result11.push(result12);
                    var savedPos3 = pos;
                    var result13 = parse_sequence_sep();
                    if (result13 !== null) {
                      var result14 = parse_translation();
                      if (result14 !== null) {
                        var result12 = [result13, result14];
                      } else {
                        var result12 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  }
                  if (result11 !== null) {
                    var result7 = [result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result8 = parse_sp();
                  if (result8 !== null) {
                    if (input.substr(pos).match(/^[)\]]/) !== null) {
                      var result9 = input.charAt(pos);
                      pos++;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("[)\\]]");
                      }
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "translation_sequence", "value": val, "indices": [indices["translation_sequence_enclosed"], pos - 1]} })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_translation_sequence() {
        var cacheKey = 'translation_sequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["translation_sequence"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var result4 = parse_sp();
          if (result4 !== null) {
            var savedPos4 = pos;
            if (input.substr(pos, 1) === ",") {
              var result13 = ",";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result13 !== null) {
              var result14 = parse_sp();
              if (result14 !== null) {
                var result12 = [result13, result14];
              } else {
                var result12 = null;
                pos = savedPos4;
              }
            } else {
              var result12 = null;
              pos = savedPos4;
            }
            var result5 = result12 !== null ? result12 : '';
            if (result5 !== null) {
              var savedPos2 = pos;
              var result7 = parse_translation();
              if (result7 !== null) {
                var result8 = [];
                var savedPos3 = pos;
                var result10 = parse_sequence_sep();
                if (result10 !== null) {
                  var result11 = parse_translation();
                  if (result11 !== null) {
                    var result9 = [result10, result11];
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
                while (result9 !== null) {
                  result8.push(result9);
                  var savedPos3 = pos;
                  var result10 = parse_sequence_sep();
                  if (result10 !== null) {
                    var result11 = parse_translation();
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                }
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "translation_sequence", "value": val, "indices": [indices["translation_sequence"], pos - 1]} })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_translation() {
        var cacheKey = 'translation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["translation"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos, 1) === "") {
            var result4 = "";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_any_integer();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "") {
                var result6 = "";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "translation", "value": val.value, "indices": [indices["translation"], pos - 1]} })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["integer"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          var savedPos3 = pos;
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result9 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result13 = input.charAt(pos);
              pos++;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            var result10 = result13 !== null ? result13 : '';
            if (result10 !== null) {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              var result11 = result12 !== null ? result12 : '';
              if (result11 !== null) {
                var result4 = [result9, result10, result11];
              } else {
                var result4 = null;
                pos = savedPos3;
              }
            } else {
              var result4 = null;
              pos = savedPos3;
            }
          } else {
            var result4 = null;
            pos = savedPos3;
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos, 4) === ",000") {
                var result7 = ",000";
                pos += 4;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",000\"");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [indices["integer"], pos - 1]} })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_any_integer() {
        var cacheKey = 'any_integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["any_integer"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [indices["any_integer"], pos - 1]} })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_word() {
        var cacheKey = 'word@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = (function() {indices["word"] = pos; return true})() ? '' : null;
        if (result3 !== null) {
          if (input.substr(pos).match(/^[^]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[^]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[^]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[^]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(val) { return {"type": "word", "value": val.join(""), "indices": [indices["word"], pos - 1]} })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sp() {
        var cacheKey = 'sp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_space();
        var result0 = result1 !== null ? result1 : '';
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\r\n\xA0*]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\r\\n\\xA0*]");
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos).match(/^[ 	\r\n\xA0*]/) !== null) {
              var result1 = input.charAt(pos);
              pos++;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("[ 	\\r\\n\\xA0*]");
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      var indices = {}
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
